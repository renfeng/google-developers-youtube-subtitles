1
00:00:00,310 --> 00:00:04,858
Android 1.0 launched in 2008. And in just the six year since then,

2
00:00:04,858 --> 00:00:09,880
there has been 11 new major platform releases. On the Android developer side,

3
00:00:09,880 --> 00:00:13,460
we show the relative number of active Android devices running a given platform

4
00:00:13,460 --> 00:00:18,314
version in this pie chart, because pie charts are awesome. For our purposes

5
00:00:18,314 --> 00:00:22,700
though, you're really better off looking at this as a histogram. If you squint,

6
00:00:22,700 --> 00:00:27,715
you can almost see a vaguely bell-shaped curve, with the oldest releases here at

7
00:00:27,715 --> 00:00:31,858
the left, their popularity dropping off as devices are upgraded or

8
00:00:31,858 --> 00:00:36,100
replaced. The largest proportion of devices are here in the middle,

9
00:00:36,100 --> 00:00:40,020
representing devices about two years old. And the newest platforms,

10
00:00:40,020 --> 00:00:43,470
gaining popularity as new phones are released or upgrades go out,

11
00:00:43,470 --> 00:00:47,523
are here on the right. So with that in mind, the Min SDK acts as your low-pass

12
00:00:47,523 --> 00:00:51,980
filter. Google Play won't show your app on devices running a platform version

13
00:00:51,980 --> 00:00:56,660
lower than its minimum SDK version. So why not just set the Min SDK to one and

14
00:00:56,660 --> 00:01:01,400
support everyone? Generally, you'll want to target as many users as you can, but

15
00:01:01,400 --> 00:01:05,040
there's a cost associated with supporting some of these older versions.

16
00:01:05,040 --> 00:01:07,830
Things like creating different execution paths around deprecated or

17
00:01:07,830 --> 00:01:12,730
update APIs or presenting a different UX to devices with different features. So

18
00:01:12,730 --> 00:01:16,360
you need to balance the opportunity of expanding your audience with the cost of

19
00:01:16,360 --> 00:01:21,480
supporting those new users. Also, remember that each release introduced with it

20
00:01:21,480 --> 00:01:24,900
new APIs and hardware support. So it may not make sense to

21
00:01:24,900 --> 00:01:28,190
make your app available to devices that don't support your minimum feature set.

22
00:01:29,220 --> 00:01:33,430
By comparison, the Target SDK is not a high-pass filter.

23
00:01:33,430 --> 00:01:36,460
It's used only to declare which platform version you've tested on.

24
00:01:37,628 --> 00:01:41,060
An app targeted to a certain API will continue to be forward compatible on

25
00:01:41,060 --> 00:01:45,650
future releases. The platform uses the Target SDK values in case a future

26
00:01:45,650 --> 00:01:50,040
platform makes a significant change to expected behavior. This ensures your app

27
00:01:50,040 --> 00:01:54,620
doesn't break when a user's phone gets upgraded. If you're developing a new app,

28
00:01:54,620 --> 00:01:58,630
there's really no reason to target anything but the latest Android version. And

29
00:01:58,630 --> 00:02:02,340
once your app has been released, make it a point to update your Target SDK and

30
00:02:02,340 --> 00:02:06,610
test as soon as possible when new platform releases roll out so you can take

31
00:02:06,610 --> 00:02:10,570
advantage of every new platform optimization and improvement it has to offer.

